[tasks.dev_up]
script = '''
    docker_args="--file .dev/docker-compose.yml"
    ./.dev/ssl_init.sh;
    docker compose ${docker_args} up -d --wait kafka-scram; #kafka-oauthbearer;
    docker compose ${docker_args} exec kafka-scram bash /opt/kafka/bin/scram_init.sh;
    docker compose ${docker_args} up -d --wait kafka-ui;
'''

[tasks.dev_down]
script = '''
    docker_args="--file .dev/docker-compose.yml"
    docker compose ${docker_args} down;
'''

[tasks.run_services]
command = "docker"
args = [
    "compose",
    "--file",
    "tests/docker-compose.yml",
    "up",
    "--wait",
    "-d",
    "kafka",
]

[tasks.setup_tests]
run_task = "run_services"

[tasks.teardown_tests]
command = "docker"
args = ["compose", "--file", "tests/docker-compose.yml", "down"]

[tasks.e2e_tests]
script.file = "tests/scripts/e2e_tests.sh"

[tasks.e2e_tests_env]
script = '''
    rm ${TEST_E2E_OUTPUT} || true;

    rdkafka2_e2e_home=/tmp/rdkafka2_e2e_tests;
    log_dir=${rdkafka2_e2e_home}/log;
    supp_dir=${rdkafka2_e2e_home}/suppressions;
    mkdir -p $log_dir;
    mkdir -p $supp_dir;

    echo "rdkafka2_e2e_home=${rdkafka2_e2e_home}" >> ${TEST_E2E_OUTPUT};
    echo "log_dir=${log_dir}" >> ${TEST_E2E_OUTPUT};
    echo "supp_dir=${supp_dir}" >> ${TEST_E2E_OUTPUT};
'''

[tasks.e2e_tests_valgrind_check]
script.file = "tests/scripts/e2e_tests_valgrind_check.sh"

[tasks.e2e]
env = { "TEST_E2E_OUTPUT" = "/tmp/rdkafka2_e2e_tests/.env" }
dependencies = ["setup_tests"]
run_task = { name = [
    "e2e_tests_env",
    "e2e_tests",
    "e2e_tests_valgrind_check",
], fork = true, cleanup_task = "teardown_tests" }

#------------- VALGRIND UPDATE --------------#

[tasks.e2e_tests_update_env]
script = '''
    rm ${TEST_E2E_OUTPUT} || true;

    rdkafka2_e2e_home=$(pwd)/tests;
    log_dir=/tmp/rdkafka2_e2e_tests;
    supp_dir=${rdkafka2_e2e_home}/suppressions;
    mkdir -p ${log_dir};
    mkdir -p ${supp_dir};

    echo "rdkafka2_e2e_home=${rdkafka2_e2e_home}" >> ${TEST_E2E_OUTPUT};
    echo "log_dir=${log_dir}" >> ${TEST_E2E_OUTPUT};
    echo "supp_dir=${supp_dir}" >> ${TEST_E2E_OUTPUT};
'''

[tasks.e2e_update]
env = { "TEST_E2E_OUTPUT" = "/tmp/rdkafka2_e2e_tests/.env" }
dependencies = ["setup_tests"]
run_task = { name = [
    "e2e_tests_update_env",
    "e2e_tests",
], fork = true, cleanup_task = "teardown_tests" }
